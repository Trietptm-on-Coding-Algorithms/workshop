#!/usr/bin/zsh
autoload colors
if [ "$terminfo[colors]" -gt 8 ]; then
	colors
fi
REPO_DIRECTORY="$(git rev-parse --show-toplevel)"
cd "$REPO_DIRECTORY"

git config --unset alias.autofix
STAGED_FILES="$(git diff --name-only --cached)"
if [ -z "$STAGED_FILES" ]; then
	print_status "There are no staged files"
	exit 0
fi

if [ -z "$(git config user.email)" ]; then
	print_error "Aborting commit because user.email is missing."
	exit 1
fi

STAGED_FILES_PYTHON="$(xargs file <<< $STAGED_FILES |  awk '/:\s+Python script/ {gsub(/:$/, "", $1); printf("\"%s\" ", $1 ); }')"
if [ ! -z "$STAGED_FILES_PYTHON" ]; then
	# running python specific checks
	PDB_LINES=$(xargs egrep -Hn --exclude-dir=build --exclude-dir=dist --color "(import\s+pdb)|(from\s+pdb\s+import)" <<< $STAGED_FILES_PYTHON)
	if [ ! -z "$PDB_LINES" ]; then
		print_error "The Python debugger (pdb) is in use"
		echo $PDB_LINES
		exit 1
	fi

	FIX_LINES=$(xargs egrep -Hni --exclude-dir=build --exclude-dir=dist --color "#\s*FIX\s*(IT|ME|THIS)" <<< $STAGED_FILES_PYTHON)
	if [ ! -z "$FIX_LINES" ]; then
		print_error "Lines marked to be fixed"
		echo $FIX_LINES
		exit 1
	fi

	PEP_LINES=$(xargs autopep8 --ignore=E101,E124,E128,E241,E26,E27,E301,E302,E309,E501 --diff <<< $STAGED_FILES_PYTHON)
	if [ ! -z "$PEP_LINES" ]; then
		print_error "Changes are not pep8 compliant"
		echo $PEP_LINES
		PATCH_FILE=$(mktemp)
		echo $PEP_LINES > $PATCH_FILE
		print_status "Patch file $PATCH_FILE created"
		print_status "Review and apply with \"git autofix\", or ignore with \"git commit -n\""
		git config alias.autofix "!workshop-git-autofix \"$REPO_DIRECTORY\" \"$PATCH_FILE\"; git config --unset alias.autofix"
		exit 1
	fi

	if [ -f ".pylintrc" ]; then
		print_status "Running style checks with pylint..."
		export KIVY_DOC_INCLUDE=x
		xargs pylint --rcfile .pylintrc --reports no <<< $STAGED_FILES_PYTHON
		if [ "$?" -ne "0" ]; then
			print_error "Style checks failed"
			exit 1
		fi
	fi

	if [ -f "tests.py" ] || [ -d "tests" ]; then
		print_status "Running unit tests..."
		python -m unittest --failfast tests &> /dev/null
		if [ $? -ne 0 ]; then
			print_error "Unit tests did not complete successfully"
			exit 1
		fi
	fi
fi
